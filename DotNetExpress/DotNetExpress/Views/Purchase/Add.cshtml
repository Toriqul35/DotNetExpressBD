@model DotNetExpress.Model.PurchaseViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section MyStyle
{
    <link href="~/CSS/Business/Add.css" rel="stylesheet" type="text/css" />
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
    <script src="//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js"></script>
    <script src="//code.jquery.com/jquery-1.11.1.min.js"></script>
    <meta name="viewport" content="width=device-width" />
    <title>Add</title>

}
<center>
    <h2 style="color:darkgreen; margin-top:-15px"> Create new Product </h2>
</center>
<div class="menu" style="margin-left:370px; margin-top:-10px">
    <table>
        <tr>
            <td>
                <a href="~/Product/Search"><input class='btn btn-info btn-xs' type="submit" value="Search" /></a>
                <a href="~/Product/ViewProduct"><input class='btn btn-info btn-xs' type="submit" value="View Purchase" /></a>
            </td>
        </tr>
    </table>
</div>

<div class="menu" style="margin-left:370px">
    <form method="post">
        <table>
            <tr>

                <td>@Html.LabelFor(c => c.Date)</td>
                <td>@Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" }, @value = DateTime.Now, @readonly = "readonly" }) </td>
                <td> @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" }) </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.InvoiceNo)</td>
                <td>@Html.TextBoxFor(c => c.InvoiceNo, Model.InvoiceNo, new { @placeholder = "Code" })</td>
                <td>@Html.ValidationMessageFor(c => c.InvoiceNo)</td>
            </tr>
            <tr>
                <td>Supplier Name : </td>
                <td>@Html.DropDownListFor(c => c.SupplierId, Model.SupplierSelect, "--Select--")</td>
                <td></td>
            </tr>
            <tr>
                <td>Product Name : </td>
                <td>@Html.DropDownListFor(c => c.ProductId, Model.ProductSelect, "--Select--")</td>
                <td></td>
            </tr>
            <tr>

                <td>@Html.LabelFor(c => c.ManufactureDate)</td>
                <td>@Html.EditorFor(model => model.ManufactureDate, new { htmlAttributes = new { @class = "form-control" }, @value = DateTime.Now, @readonly = "readonly" }) </td>
                <td> @Html.ValidationMessageFor(model => model.ManufactureDate, "", new { @class = "text-danger" }) </td>
            </tr>
            <tr>

                <td>@Html.LabelFor(c => c.ExpireDate)</td>
                <td>@Html.EditorFor(model => model.ExpireDate, new { htmlAttributes = new { @class = "form-control" }, @value = DateTime.Now, @readonly = "readonly" }) </td>
                <td> @Html.ValidationMessageFor(model => model.ExpireDate, "", new { @class = "text-danger" }) </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.Quantity)</td>
                <td><input type="number" name="Quantity" id="quantity" value="@Model.Quantity" /></td>
                <td>@Html.ValidationMessageFor(c => c.Quantity)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.UnitPrice)</td>
                <td><input type="number" name="UnitPrice" id="Unit" value="@Model.UnitPrice" /></td>
                <td>@Html.ValidationMessageFor(c => c.UnitPrice)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.TotalPrice)</td>
                <td><input type="number" name="TotalPrice" id="Total" value="@Model.TotalPrice" /></td>
                <td>@Html.ValidationMessageFor(c => c.TotalPrice)</td>
            <tr>
                <td>@Html.LabelFor(c => c.PreviousUnit)</td>
                <td><input type="number" name="PreviousUnit" value="@Model.PreviousUnit" /></td>
                <td>@Html.ValidationMessageFor(c => c.PreviousUnit)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.PreviousMRP)</td>
                <td><input type="number" name="PreviousMRP" value="@Model.PreviousMRP" /></td>
                <td>@Html.ValidationMessageFor(c => c.PreviousMRP)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.MRP)</td>
                <td><input type="number" name="MRP" id="MRP" value="@Model.MRP" /></td>
                <td>@Html.ValidationMessageFor(c => c.MRP)</td>
            </tr>
            <tr>
                <td>@Html.LabelFor(c => c.Remarks)</td>
                <td>@Html.TextBoxFor(c => c.Remarks, Model.Remarks, new { @placeholder = "Write Remarks Values" })</td>
                <td>@Html.ValidationMessageFor(c => c.Remarks)</td>
            </tr>
            <tr>
                <td> Action </td>
                <td><input class='btn btn-info btn-xs' type="submit" value="Entry" /></td>
                <td>
                    @if (ViewBag.Message != null)
                    {
                        <h3>
                            <b>
                                @ViewBag.Message
                            </b>
                        </h3>
                    }
                </td>
            </tr>
        </table>
    </form>
</div>
@section MyScript
    {

    <script src="~/Scripts/jquery-1.8.0.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

<script>

    $(document).ready(function () {

        var quantity = 0;
        var Unit = 0;
        var mrp = 25;
        $("#quantity").keyup(function () {

            if (!isNullOrEmpty($("#quantity").val())) {
                quantity = parseInt($("#quantity").val());
            }


            if (!isNullOrEmpty($("#Unit").val())) {
                Unit = parseInt($("#Unit").val());
            }

            $("#Total").val(quantity * Unit);
             $("#MRP").val(quantity * Unit)+((mrp/100)*(quantity * Unit));

        });
        $("#Unit").keyup(function () {
            if (!isNullOrEmpty($("#quantity").val())) {
                quantity = parseInt($("#quantity").val());
            }


            if (!isNullOrEmpty($("#Unit").val())) {
                Unit = parseInt($("#Unit").val());
            }
            $("#Total").val(quantity * Unit);
               $("#MRP").val((quantity * Unit)+((mrp/100)*(quantity * Unit)));
        });


        function isNullOrEmpty(data) {
            if (data === undefined || data === "" || isNaN(data)) {
                return true;
            }
            return false;

        }
    });



</script>


